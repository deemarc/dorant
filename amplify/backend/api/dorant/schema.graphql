# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type OrderItem @model @auth(rules: [{ allow: public }]) {
  id: ID!
  menuID: ID! @index(name: "byMenu")
  choiceID: ID! @index(name: "byChoice")
}

enum OrderStatus {
  NEW
  PROCESSING
  WAITING
  SUMMITTED
  CANCLED
}

type Order @model @auth(rules: [{ allow: public }]) {
  id: ID!
  status: OrderStatus
  tableID: ID! @index(name: "byTable")
  created: AWSDateTime
  updated: AWSDateTime
  user: String
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  UNAVAILABLE
}

type Table @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  status: TableStatus
  Orders: [Order] @hasMany(indexName: "byTable", fields: ["id"])
}

type Ingredient @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  ingredientlocationID: ID! @index(name: "byIngredientLocation")
  ingredientcatagoryID: ID! @index(name: "byIngredientCatagory")
  IngredientUseds: [IngredientUsed]
    @hasMany(indexName: "byIngredient", fields: ["id"])
  IngredientStock: IngredientStock @hasOne
}

type IngredientCatagory @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  Ingredients: [Ingredient]
    @hasMany(indexName: "byIngredientCatagory", fields: ["id"])
}

type IngredientLocation @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  url: AWSURL
  Ingredients: [Ingredient]
    @hasMany(indexName: "byIngredientLocation", fields: ["id"])
}

type Option @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
}

type Choice
  @model
  @auth(rules: [{ allow: public }, { allow: private }, { allow: owner }]) {
  id: ID!
  name: String
  IngredientUseds: [IngredientUsed]
    @hasMany(indexName: "byChoice", fields: ["id"])
  OrderItems: [OrderItem] @hasMany(indexName: "byChoice", fields: ["id"])
}

type IngredientUsed @model @auth(rules: [{ allow: public }]) {
  id: ID!
  amount: Int
  ingredientID: ID! @index(name: "byIngredient")
  menus: [Menu] @manyToMany(relationName: "MenuIngredientUsed")
  choiceID: ID! @index(name: "byChoice")
}

type Menu @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  IngredientUseds: [IngredientUsed]
    @manyToMany(relationName: "MenuIngredientUsed")
  OrderItems: [OrderItem] @hasMany(indexName: "byMenu", fields: ["id"])
}

type IngredientStock @model @auth(rules: [{ allow: public }]) {
  id: ID!
  amount: Int
}
